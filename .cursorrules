# AIgUI Project Overview

AIgUI is a React frontend project that leverages Large Language Models (LLMs) to dynamically generate data visualization and interactive UI components. The platform also includes a user community similar to GitHub, where users can:

- Share their created UI interfaces (cards, tables, charts)
- Share insights for specific domains
- Browse popular UI components
- Fork and modify existing components based on personal requirements

This project aims to democratize UI creation through AI assistance while fostering a collaborative community of creators.

# Language and Documentation Rules

## English Usage
- All content in files must be written in English, including:
  - README.md and all other documentation files
  - Code comments
  - Documentation
  - UI text
  - Data field names and values
  - When modifying the `.cursorrules` file, all additions and changes must be in English

## UI Development Rules
1. Technology Stack:
   - Use React for component development
   - Use Tailwind CSS for styling
   - Use shadcn/ui for UI components
   - Always use shadcn/ui components instead of native HTML elements (e.g., use shadcn Button component instead of HTML `<button>` element)

2. Layout Guidelines:
   - Ensure page layouts are logical and aesthetically pleasing
   - Maintain appropriate element density (not too crowded, not too sparse)
   - Effectively utilize whitespace, especially in left and right margins
   - Prefer horizontal (left-right) layouts where appropriate

3. Component Design:
   - Create reusable components following React best practices
   - Ensure components are responsive across different screen sizes
   - Maintain consistent styling using Tailwind CSS utility classes
   - Leverage shadcn/ui components for a cohesive design system

4. UI/UX Considerations:
   - Prioritize user experience in all design decisions
   - Ensure adequate contrast for readability
   - Implement intuitive navigation and interaction patterns

## Code Conventions
1. Component Definition:
   - Always use function declaration syntax for React components
   - Do not use arrow function syntax for component definitions
   - Ensures consistent component creation and easier debugging
   - Example of correct component definition:
     ```jsx
     function UserProfile(props) {
       return <div></div>;
     }
     ```
   - Incorrect example to avoid:
     ```jsx
     // Avoid this syntax
     const UserProfile = (props) => {
       return <div>
       </div>;
     }
     ```

2. className Handling:
   - Always wrap `className` values with the `cn` utility function, e.g., `<div className={cn("text-red-400")}></div>`
   - The `cn` function is used to facilitate manual modification of classNames, making it easier to organize classNames with commas and line breaks
   - This approach improves code readability, especially when dealing with complex conditional class names
   - Example:
     ```jsx
     <div className={cn(
       "base-class",
       isActive && "active-class",
       variant === "primary" ? "primary-class" : "secondary-class"
     )}>
       Content
     </div>
     ```

3. Component Development:
   - All components must include default demo data for testing and preview purposes
   - When images are required, use Unsplash images as mock data
   - Demo data should be comprehensive enough to showcase all component features and states
   - Example:
     ```jsx
     // Default demo data for a user profile component
     const defaultUserData = {
       name: "Alex Johnson",
       title: "Product Designer",
       avatar: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=250&auto=format",
       stats: {
         followers: 1240,
         following: 453,
         projects: 28
       }
     };
     ```

4. Component File Structure:
   - Each component must be placed in its own dedicated directory

5. UI Component Usage:
   - Always use shadcn/ui components instead of native HTML elements
   - Examples of required substitutions:
     - Use shadcn/ui Button component instead of HTML `<button>` element
     - Use shadcn/ui Input component instead of HTML `<input>` element
     - Use shadcn/ui Select component instead of HTML `<select>` element
   - When a shadcn/ui component exists for a particular UI element, it must be used
   - Only use native HTML elements when there is no corresponding shadcn/ui component

6. Component File and Export Rules:
   - Each file must contain only one React component
   - Components must be exported using named export, not default export
   - Example of correct export:
     ```jsx
     // Correct way
     export function UserProfile(props) {
       return <div></div>;
     }
     ```
   - Incorrect export to avoid:
     ```jsx
     // Avoid this syntax
     export default function UserProfile(props) {
       return <div></div>;
     }
     ```
