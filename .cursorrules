# Language and Documentation Rules

## English Usage
- All content in files must be written in English, including:
  - Code comments
  - Documentation
  - UI text
  - Data field names and values
  - When modifying the `.cursorrules` file, all additions and changes must be in English

## Documentation Requirements
- Each folder containing code files must include a `docs.md` file
- The `docs.md` file should:
  - Document requirements for all code files in the current directory
  - Be updated whenever code files are modified
  - Maintain accuracy and be up-to-date
  - Be properly organized into logical sections
  - Serve as the primary documentation for the directory's code

## Documentation Update Process
1. When creating new code files:
   - Create corresponding `docs.md` if it doesn't exist
   - Add documentation for the new files
2. When modifying existing code:
   - Update the relevant sections in `docs.md`
   - Ensure documentation reflects current functionality
3. Must be properly structured with clear sections
4. Documentation sections should include:
   - Purpose and overview
   - File descriptions
   - Key functionalities
   - Dependencies
   - Any important technical decisions or considerations

## UI Development Rules
1. Technology Stack:
   - Use React for component development
   - Use Tailwind CSS for styling
   - Use shadcn/ui for UI components

2. Layout Guidelines:
   - Ensure page layouts are logical and aesthetically pleasing
   - Maintain appropriate element density (not too crowded, not too sparse)
   - Effectively utilize whitespace, especially in left and right margins
   - Prefer horizontal (left-right) layouts where appropriate

3. Component Design:
   - Create reusable components following React best practices
   - Ensure components are responsive across different screen sizes
   - Maintain consistent styling using Tailwind CSS utility classes
   - Leverage shadcn/ui components for a cohesive design system

4. UI/UX Considerations:
   - Prioritize user experience in all design decisions
   - Ensure adequate contrast for readability
   - Implement intuitive navigation and interaction patterns

## Code Conventions
1. className Handling:
   - Always wrap `className` values with the `cn` utility function, e.g., `<div className={cn("text-red-400")}></div>`
   - The `cn` function is used to facilitate manual modification of classNames, making it easier to organize classNames with commas and line breaks
   - This approach improves code readability, especially when dealing with complex conditional class names
   - Example:
     ```jsx
     <div className={cn(
       "base-class",
       isActive && "active-class",
       variant === "primary" ? "primary-class" : "secondary-class"
     )}>
       Content
     </div>
     ```
